package com.amoryan.demo.practice1;

import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.RectF;
import android.support.annotation.Nullable;
import android.util.AttributeSet;
import android.view.View;

/**
 * @author: Domino
 * @className: CircleProgressBar
 * @description: 圆形进度条
 * @createTime: 2017/8/30 上午9:44
 */
public final class CircleProgressBar extends View {

    private Context mContext;

    private Paint mPaint;

    private int mBackGroundColor;
    private int mProgressColor;
    private float mRadius;
    private float mPaintWidth;
    private float mMaxProgress;
    private boolean mIsOpenAnimation;
    private int mStartDegree;
    private int mDegree;

    private int mProgressDegree;
    private int mDrawDegree;

    public CircleProgressBar(Context context, @Nullable AttributeSet attrs) {
        super(context, attrs);
        init(context, attrs);
    }

    private void init(Context context, AttributeSet attrs) {
        mContext = context;
        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);

        TypedArray typedArray = mContext.obtainStyledAttributes(attrs, R.styleable.CircleProgressBar);
        mBackGroundColor = typedArray.getColor(R.styleable.CircleProgressBar_backgroundColor, Color.parseColor("#bbbbbb"));
        mProgressColor = typedArray.getColor(R.styleable.CircleProgressBar_progressColor, Color.parseColor("#41a9f8"));
        mRadius = typedArray.getDimension(R.styleable.CircleProgressBar_radius, 50);
        mMaxProgress = typedArray.getFloat(R.styleable.CircleProgressBar_max, 10);
        float curProgress = typedArray.getFloat(R.styleable.CircleProgressBar_progress, 0);
        mIsOpenAnimation = typedArray.getBoolean(R.styleable.CircleProgressBar_openAnimation, false);
        mPaintWidth = typedArray.getDimension(R.styleable.CircleProgressBar_paintWidth, 10);
        int capStyle = typedArray.getInteger(R.styleable.CircleProgressBar_capStyle, 0);
        mStartDegree = typedArray.getInteger(R.styleable.CircleProgressBar_startDegree, 0);
        mDegree = typedArray.getInteger(R.styleable.CircleProgressBar_degree, 0);

        mPaint.setStrokeWidth(mPaintWidth);
        mPaint.setStyle(Paint.Style.STROKE);
        switch (capStyle) {
            case 0:
                mPaint.setStrokeCap(Paint.Cap.BUTT);
                break;
            case 1:
                mPaint.setStrokeCap(Paint.Cap.ROUND);
                break;
            case 2:
                mPaint.setStrokeCap(Paint.Cap.SQUARE);
                break;
        }
        setProgress(curProgress);
    }

    public void setProgress(float progress) {
        mProgressDegree = (int) (mDegree * (progress / mMaxProgress));
    }

    public void setOpenAnimation(boolean openAnimation) {
        mIsOpenAnimation = openAnimation;
    }

    public void setMaxProgress(float maxProgress) {
        mMaxProgress = maxProgress;
    }

    public void update() {
        mDrawDegree = 0;
        invalidate();
    }

	@Override
	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec){
		int wMode = MeasureSpec.getMode(widthMeasureSpec);
		int wSize = MeasureSpec.getSize(widthMeasureSpec);

		int realWidth;
		switch(wMode){
			case MeasureSpec.AT_MOST /*wrap_content*/:
			realWidth = mRadius*2+mpaintwidth+getLeftPadding()+getRightPadding();
			break;
			case MeasureSpec.EXACTLY/*Match_parent ///  50dp*/ :
			realWidth = Math.min(realWidth,wSize);
			break;
			case MeasureSpec:UNSPECIFIED /* scrollview*/:break;
		}

		int hMode = MeasureSpec.getMode(widthMeasureSpec);
		int hSize = MeasureSpec.getSize(heightMeasureSpec);
		switch(wMode){
			case MeasureSpec.AT_MOST /*wrap_content*/:break;
			case MeasureSpec.EXACTLY/*Match_parent ///  50dp*/ : break;
			case MeasureSpec:UNSPECIFIED /* scrollview*/:break;
		}
		setDimensionMesasured
	}

    @Override
    protected void onDraw(Canvas canvas) {
        int width = getMeasuredWidth();
        int height = getMeasuredHeight();

        float centerX = width / 2;
        float centerY = height / 2;

        mPaint.setColor(mBackGroundColor);
        RectF rectF1 = new RectF(centerX - mRadius, centerY - mRadius, centerX + mRadius, centerY + mRadius);
        canvas.drawArc(rectF1, mStartDegree, mDegree, false, mPaint);

        mPaint.setColor(mProgressColor);
        if (mIsOpenAnimation) {
            canvas.drawArc(rectF1, mStartDegree, mDrawDegree, false, mPaint);
            if (++mDrawDegree <= mProgressDegree) {
                invalidate();
            }
        } else {
            canvas.drawArc(rectF1, mStartDegree, mProgressDegree, false, mPaint);
        }
    }

}
