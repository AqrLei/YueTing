package com.example.testapp;

import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;

import android.content.res.AssetManager;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.media.MediaPlayer;
import android.media.audiofx.Visualizer;
import android.net.Uri;
import android.os.IBinder;
import android.os.Message;
import android.util.Log;
import android.widget.Toast;

import com.example.aqr.musicplay.MainActivity;
import com.example.aqr.musicplay.R;
import com.example.aqr.musicplay.db.musicDBHelper;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import cn.bmob.v3.b.I;

/**
 * Created by Aqr on 2017/5/3.
 */

public class musicServices extends Service {
    private int status = 0x11;//0x11
    private int current = 0;
    private int preCurrent = 0;
    private int play_style = 3;//0,1,2,3,4
    private MediaPlayer mMediaPlayer, nextMediaPlayer;
    private servicesReceiver myReceiver;
    private AssetManager am;
    private ArrayList<String> music_names = new ArrayList<String>();
    private ArrayList<String> music_uris = new ArrayList<String>();
    private IntentFilter filter;
    private musicDBHelper musicdbhelper;
    private SQLiteDatabase db;
    final private Intent toMain = new Intent(MainActivity.SERVICES_ACTION);


    @Override
    public IBinder onBind(Intent intent) {

        return null;
    }

    @Override
    public void onCreate() {
        super.onCreate();

        init();

    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        return super.onStartCommand(intent, flags, startId);
    }

    @Override
    public boolean onUnbind(Intent intent) {
        return super.onUnbind(intent);
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        if (mMediaPlayer != null) {
            mMediaPlayer.stop();
            mMediaPlayer.release();
        }
    }

    private void init() {
        musicdbhelper = new musicDBHelper(this,"music.db", null, 1);
        db = musicdbhelper.getWritableDatabase();
        getMusicDataFromDB();
        filter = new IntentFilter();
        filter.addAction(MainActivity.UPDATE_ACTION);
        myReceiver = new servicesReceiver();
        am = getAssets();
        mMediaPlayer = new MediaPlayer();
        mMediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
            @Override
            public void onCompletion(MediaPlayer mp) {

                    nextMusic(1);
                    prepareAndPlayMusic(current);


            }
        });
        //prepareAndPlayMusic(current);

                registerReceiver(myReceiver, filter);
    }
    private void getMusicDataFromDB() {
        Cursor cursor = db.query("Music",null, null, null, null, null, null);
        if(cursor.moveToFirst()) {
            do{
                String name = cursor.getString(cursor.getColumnIndex("musicname"));
                String url = cursor.getString(cursor.getColumnIndex("url"));
                music_names.add(name);
                music_uris.add(url);


            }while(cursor.moveToNext());
        }
        cursor.close();
    }


    public void setVisualizer() {
        //Log.d("Test","setVisualizer");
        MainActivity.mVisualizer = new Visualizer(mMediaPlayer.getAudioSessionId());
        MainActivity.mVisualizer.setCaptureSize(Visualizer.getCaptureSizeRange()[1]);
        MainActivity.mVisualizer.setDataCaptureListener(new Visualizer.OnDataCaptureListener() {
            @Override
            public void onWaveFormDataCapture(Visualizer visualizer, byte[] waveform, int samplingRate) {
                MainActivity.myVisualizer.updateVisualizer(waveform);

            }

            @Override
            public void onFftDataCapture(Visualizer visualizer, byte[] fft, int samplingRate) {


            }
        },Visualizer.getMaxCaptureRate() / 2, true, false);
        MainActivity.mVisualizer.setEnabled(true);

    }


    public void prepareAndPlayMusic(int current) {

        Uri uri = Uri.parse(music_uris.get(current));
        toMain.putExtra("position", current);
        if(MainActivity.mVisualizer != null&&MainActivity.mVisualizer.getEnabled() == true) {
            MainActivity.mVisualizer.setEnabled(false);
        }


        try {
            mMediaPlayer.reset();
            mMediaPlayer.setDataSource(this, uri);
            mMediaPlayer.prepare();
            setVisualizer();
            if (status == 0x13) {
                mMediaPlayer.start();
            }

            if (mMediaPlayer.isPlaying() && mMediaPlayer != null) {

                new Thread() {
                    @Override
                    public void run() {
                        if (!MainActivity.isStartTacking) {
                            while (true) {
                                try {
                                    sleep(100);
                                } catch (InterruptedException e) {
                                    e.printStackTrace();
                                }
                                try {

                                    Message msg = new Message();
                                    msg.what = 0;

                                    if (mMediaPlayer.isPlaying() && mMediaPlayer != null) {
                                        msg.arg1 = mMediaPlayer.getDuration();
                                        msg.arg2 = mMediaPlayer.getCurrentPosition();
                                        MainActivity.musichandler.sendMessage(msg);
                                    }


                                } catch (IllegalStateException e) {
                                    e.printStackTrace();
                                }
                            }
                        }
                    }
                }.start();
            }


        } catch (IOException e) {
            e.printStackTrace();
        }
        sendBroadcast(toMain);

    }

    public void nextMusic(int type) {
        if(type == 1) {
            switch (play_style) {
                case 0:
                    status = 0x11;
                    toMain.putExtra("status", status);
                    sendBroadcast(toMain);
                    break;
                case 1:

                    break;
                case 2:
                    current += 1;
                    if (current >= music_uris.size()) {
                        current = 0;
                        status = 0x11;
                        toMain.putExtra("status", status);
                        sendBroadcast(toMain);
                    }
                    break;
                case 3:
                    current += 1;
                    if (current >= music_uris.size()) {
                        current = 0;
                    }
                    break;
                case 4:
                    current = (int) (Math.random() * music_uris.size());
                    if (current == 5) {
                        current = 4;
                    }
                    break;
                default:
                    break;
            }
        }
        else {
            if (play_style != 4) {
                current += 1;
                if (current >= music_uris.size()) {
                    current = 0;
                }
            } else {
                current = (int) (Math.random() * music_uris.size());
                if (current == 5) {
                    current = 4;
                }

            }
        }

    }

    public void preMusic() {
        //Log.d("Test","Prestyle: "+play_style);


        if (play_style != 4) {
            current -= 1;
            if (current < 0) {
                current = music_uris.size() - 1;
            }
        } else {
            current = (int) (Math.random() * music_uris.size());
            if (current == 5) {
                current = 4;
            }
        }

    }


    public class servicesReceiver extends BroadcastReceiver {
        @Override
        public void onReceive(Context context, Intent intent) {
            int control = intent.getIntExtra("control", -1);
            int style = intent.getIntExtra("style", -1);
            int position = intent.getIntExtra("position", -1);
            if (intent.getStringArrayListExtra("musicname") != null) {
                if (!music_names.isEmpty()) {
                    music_names.clear();
                    music_uris.clear();
                }
                music_names.addAll(intent.getStringArrayListExtra("musicname"));
                music_uris.addAll(intent.getStringArrayListExtra("musicuri"));
            }
            if (position != -1) {
                current = position;

            }
            if (current != preCurrent && control == 1) {
                status = 0x11;
            }

            switch (control) {
                case 0:
                    play_style = style;
                    //Log.d("Test","Initstyle: "+play_style);
                    break;
                case 1:
                    //Log.d("Test","status: "+status);
                    if (!music_names.isEmpty()) {
                        if (status == 0x11) {
                            status = 0x13;
                            toMain.putExtra("status", 0x13);
                            prepareAndPlayMusic(current);

                        } else if (status == 0x12) {
                            toMain.putExtra("status", 0x13);
                            mMediaPlayer.start();
                            status = 0x13;
                            sendBroadcast(toMain);
                        } else if (status == 0x13) {
                            toMain.putExtra("status", 0x12);
                            mMediaPlayer.pause();
                            status = 0x12;
                            sendBroadcast(toMain);
                        }
                    } else {
                        Toast.makeText(musicServices.this, "无歌曲", Toast.LENGTH_SHORT).show();
                    }
                    break;
                case 2:
                    if (!music_names.isEmpty()) {
                        nextMusic(0);
                        prepareAndPlayMusic(current);
                    } else {
                        Toast.makeText(musicServices.this, "无歌曲", Toast.LENGTH_SHORT).show();
                    }

                    break;
                case 3:
                    if (!music_names.isEmpty()) {
                        preMusic();
                        prepareAndPlayMusic(current);
                    } else {
                        Toast.makeText(musicServices.this, "无歌曲", Toast.LENGTH_SHORT).show();
                    }

                    break;
                case 4:
                    mMediaPlayer.seekTo(intent.getIntExtra("progress", mMediaPlayer.getCurrentPosition()));
                    break;
                case -2:

                default:
                    break;
            }
            preCurrent = current;

        }
    }
}


